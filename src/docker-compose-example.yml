services:
    nginx:
        build:
            # context: .
            # dockerfile: ../.docker/nginx/Dockerfile
            # o
            context: ../.docker/nginx
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}_cont_nginx
        volumes:
            - '.:/var/www/html'
        ports:
            - '${APP_PORT:-80}:80'
        networks:
            - mini_frame
        depends_on:
            - php_fpm
            - db_server
            - mail_server
    php_fpm:
        build:
            context: ../.docker/php
            dockerfile: Dockerfile
        container_name: ${COMPOSE_PROJECT_NAME}_cont_php_fpm
        volumes:
            - '.:/var/www/html'
            - '../.docker/php/php.ini:/usr/local/etc/php/php.ini'
        networks:
            - mini_frame
        depends_on:
            - db_server
    # NodeJS
    node_js:
        image: node:21.7.3-slim
        container_name: ${COMPOSE_PROJECT_NAME}_cont_node_js
        working_dir: /var/www/html
        # NECESARIO ejecutar un comando tras el arranque (sino, se parará)
        command: 'npm run dev'
        volumes:
            - .:/var/www/html
        # network_mode: host
        networks:
            - mini_frame
        # NO NECESARIO que dependa de otro servicio
        # depends_on:
        #     - php_fpm
    db_server:
        image: mysql:8.0
        container_name: ${COMPOSE_PROJECT_NAME}_cont_db_server
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        expose:
            - '${FORWARD_DB_PORT}'
        restart: always
        environment:
            MYSQL_TCP_PORT: '${DB_PORT}'
            MYSQL_ROOT_HOST: '%'
            # MYSQL_ROOT_PASSWORD: '${DB_ROOT_PASSWORD}'
            MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            # MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_PASSWORD_FILE: /run/secrets/db_user_password
            # Para indicar si se permite que el ROOT acceda
            # con (1) o sin contraseña (0)
            MYSQL_ALLOW_EMPTY_PASSWORD: 0
        secrets:
            - db_root_password
            - db_user_password
        volumes:
            - 'mini_frame-mysql:/var/lib/mysql'
        networks:
            - mini_frame
    db_admin:
        image: 'phpmyadmin:latest'
        container_name: ${COMPOSE_PROJECT_NAME}_cont_db_admin
        ports:
            - '${FORWARD_PHPMYADMIN_PORT:-8008}:80'
        environment:
            PMA_HOST: '${DB_HOST}'
            PMA_PORT: '${DB_PORT}'
        networks:
            - mini_frame
        depends_on:
            - db_server
    mail_server:
        image: 'axllent/mailpit:latest'
        container_name: ${COMPOSE_PROJECT_NAME}_cont_mail_server
        ports:
            - '${FORWARD_MAILPIT_PORT:-1025}:1025'
            - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
        networks:
            - mini_frame
secrets:
    db_root_password:
        file: ../.docker/secrets/db_root_password.txt
    db_user_password:
        file: ../.docker/secrets/db_user_password.txt
networks:
    mini_frame:
        driver: bridge
volumes:
    mini_frame-mysql:
        driver: local
